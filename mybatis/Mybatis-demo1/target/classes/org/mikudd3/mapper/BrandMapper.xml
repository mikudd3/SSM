<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->

<mapper namespace="org.mikudd3.mapper.BrandMapper">
    <!--    增删改查书写位置-->
    <!--
    数据库中的字段名与实体类不一致
    解决：
        起别名，对不一样的列名起别名
        sql片段:
        resultMap:
    -->

    <!--    sql片段-->
    <!--<sql id="brand_column">
        id, brand_name as brandName, company_name as companyName, ordered, description, status
    </sql>
    <select id="selectAll" resultType="org.mikudd3.pojo.Brand">
        &lt;!&ndash;        起别名，对不一样的列名起别名&ndash;&gt;
        &lt;!&ndash;        select id, brand_name as brandName, company_name as companyName, ordered, description, status&ndash;&gt;
        &lt;!&ndash;        from tb_brand;&ndash;&gt;

        &lt;!&ndash;        sql片段&ndash;&gt;
        select
        <include refid="brand_column"></include>
        from tb_brand;
    </select>-->


    <!--    resultMap:-->
    <resultMap id="brandResultMap" type="Brand">
        <!--id:完成主键字段映射
        result：完成一般字段映射
        属性：
            column：数据库表中字段
            property ：Javabean类中属性-->
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"></result>
    </resultMap>
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

    <!--占位符：
        1.#{} :替换为？，防止sql注入
        2.${} ：与sql语句拼接，相当于Statement
        特殊字符处理
            1.转义字符
                &lt; => 表示"<"
            2.CDATA区
                <![CDATA[
                    <    // 在这里书写特殊字符
                ]]>
        -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>


    <!--
        条件查询
    -->
    <!--    <select id="selectByCondition" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand-->
    <!--        where status = #{status}-->
    <!--        and company_name like #{companyName}-->
    <!--        and brand_name like #{brandName};-->
    <!--    </select>-->

    <!--    动态条件查询
            *if : 条件判断
                *test：逻辑表达式
            *问题
                *恒等式 ： 1 = 1
                *where标签：
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

    <!--    单条件动态查询
    -->
    <select id="selectOneByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>

    <!--    添加数据-->
    <!--
        useGeneratedKeys = "true"
        keyProperty = "id"
        设置为主键返回
    -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name,company_name,ordered,description,status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>


    <!--    修改全部字段-->
    <!--<update id="update">
        update tb_brand
        set
        brand_name = #{brandName},
        company_name = #{companyName},
        ordered = #{ordered},
        description = #{description},
        status = #{status}
        where id = #{id};
    </update>-->

    <!--    修改动态字段-->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>

    <!--    删除一个数据-->
    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>

    <!--
    批量删除
        collection参数：
            mybatis会将数据参数，封装为一个Map集合，
                *默认：array = 数组
                *使用@param注解改变mao集合的默认key名称 ： deleteByIds(@Param("ids") Integer[] ids)
            item:表示条件字段
            separator：分隔符
            open：以什么开始
            close：以什么结束
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>


</mapper>